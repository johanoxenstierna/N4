

log:
3 - migrate from N2

NEW HHHERER THIS WHOLE THING IS DEPRECATED ================
SEE N2_doc in Desktop/N4
post scriptum ==========================================
-key structural elements of project.
    -Work toward a clean folder structure. You never want any level to be cluttered
with files. If you have too many files in any folder level its a sign you dont have enough folders.
    -gitignore. This is just part of fundamental git you really want to make sure that all big files are ignored, in
    my case its only the video files. It's not just about maintaining a free quota on git its also that its really
    important to make sure git folders are not growing too large cuz once they do the only easy way to fix it is to migrate the repo to a new one.
    -Module just used for plotting. I call it src/trig_functions.py. If you're working with trig functions its really
    nice to have. Also, use Desmos graphing calculator.
    -parameters module
-
-importance of fast debugging and how to set up an environment where test cycle is minimized (seconds per test)
    -importance of random seeds and where to set them. All random seeds are set on as high abstraction level as
    possible.
    -Blitting. One important thing about matplotlib animation is that the list of drawable objects, that is the ax
    objects, need to be stored in a list instead of a dict. So it is list or no blitting. And you need blitting.
    Here is an example from a previous project: So say I need to animate 300 objects at each frame. Each object is
    therefore an ax object, and it is also a class instance with all its variables and methods, that I coded,
    it's all the things that are needed for the animation loop to know what it has
    to draw at each frame. And all these class instances are stored in a dict with this nice structure.
    Here is what I did: I have my list of ax objects. Since it is a list each ax is located at some index
    in it. So basically each class instance represents an ax object, something to be drawn at each frame, that ax
    object is stored in a list, and so what I do I put the index of the ax object as a variable inside the class
    instance. Then I loop through

-Good documentation is a tell-tale sign of being an experienced dev (it shows the dev likes to explain things,
has patience etc): show example long docstrings
    -also don't delete old docstrings which describe issues which were fixed. Just collapse them away and store them.
    In the moment I often feel like "ah what the hell" this is insignificant, but I often surprise myself reading them
    at a later stage. there are times when you will find yourself reading them.
-nested functions bad: want to be able to collapse everything to see all functions. if too many functions =
 sign that module too large, convert it to a class.
-the WRITE function at the top
-what to print in the animation loop: index and number of im_ax objects being drawn and also information about objects
 that are not being drawn.
-Difference between parameters module and code module. In this project I uses JSON files to put my parameters in,
this can be good to make the separation clear. Or it can be done directly in the corresponding object class. In
this case for example this json file represents everything needed to build a certain ship class object.
So one could have skipped the JSON and done this in the class object instead with some inheritance. There are some
advantages in using python instead of JSON if one uses an IDE, but the project may also become a bit messy, so
JSON for parameter storage is quite a valid approach.
-inheritance and its strengths/weaknesses: This is one of those "can always be improved things". Often in code courses
you'll get dropped this big code that has a bunch of inheritence and the creators of the code will say how important
the inheritance is to make everything work etc. But when you look closer at inheritance there are some BIG caveats. The
stereotypical one is that code when written the first time does not fit well with inheritance because inheritance
does not allow the same level of flexibility. But there's more to it. Whenever you write an abstract class from which
other classes inherit, you essentially force the other classes into a certain mold, and the problem is that even late
in a project one may wish to change the mold.
-How to keep up hobby project momentum:
When it comes to the momentum in the project, Nowadays in my hobby projects,
I always strife for a sense of moving forward at a really slow but steady pace.
I do this because there is no reason to stress, like, a hobby project is never going to have a deadline,
 But also, one thing I learnt in my professional coding, is that adding code quickly incurs more Tech/maintanence debt:
 As a beginner one builds large project without much sense of where one is going, so what tends to happen then is that
 project reaches a critical point in terms of complexity where you "get lost" in the code so to say.
 One can actually measure this in a very direct way:
 By looking at the time it takes to fix a bug: How long time on average does it take to fix the bug,
 and is there a workflow in place to fix the bug? How frustrated does one get when faced with an annoying bug?
 Something that comes more and more with experience quite generally,
 is that one learns to avoid getting stuck in a negative experience, it's learning by negative reinforcement.
 And the way to do that is by things like implementing unit tests, documentation and being ok with things moving slow.
 It may be boring but it is things like these that really make the difference in big projects.
 The ideal for me is that it should always feel easy to write code. In my current projects I spend orders of magnitude
 more time than before, on building an infrastructure that prevents me to ever "get lost" or get frustrated.
 For those who are into strategy gaming all I just said can be translated to early/mid/late game and macro vs micro.
 Devs are different but the thing I have improved on a lot with experience is mid-late game and macro.
 Writing fast scripts is ok, but after a certain point those scripts need to be converted into classes and split
 into modules.
 -How to not get in over your head: You.